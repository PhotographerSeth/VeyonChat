name: Build VeyonChat (in-tree)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    env:
      VEYON_VERSION: "4.9.7"
      QT_VERSION: "6.8.3"

    steps:
      # 1) Checkout Veyon source (full history quiets version logic)
      - name: Checkout Veyon
        uses: actions/checkout@v4
        with:
          repository: veyon/veyon
          ref: "v${{ env.VEYON_VERSION }}"
          path: veyon
          fetch-depth: 0

      # 2) Checkout YOUR plugin into veyon/plugins/chat (keep your filenames as-is)
      - name: Checkout VeyonChat into plugins/chat
        uses: actions/checkout@v4
        with:
          path: veyon/plugins/chat

      # 3) Install Qt + REQUIRED modules (space-separated!)
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          modules: "qt5compat qttools qtsvg"

      # (Optional) Show which modules are available for this version/arch if you ever need to debug
      # - name: List available Qt modules (debug)
      #   shell: pwsh
      #   run: |
      #     python -m aqt list-qt windows desktop --modules $env:QT_VERSION win64_msvc2022_64

      # 4) Set up MSVC toolchain
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # 5) Safe compiler check (no nonzero exit like D8003)
      - name: Verify MSVC toolchain
        shell: pwsh
        run: |
          cl /? > $null
          where cl
          where link

      # 6) Enable your plugin inside the Veyon workspace (workspace-only patch)
      - name: Enable chat plugin
        shell: pwsh
        working-directory: veyon/plugins
        run: |
          $cm = Join-Path $PWD "CMakeLists.txt"
          Add-Content -Path $cm -Value "`n# Injected by CI: build chat plugin`nadd_subdirectory(chat)`n"

      # 7) Configure + build
      - name: Configure (CMake)
        working-directory: veyon
        run: cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release

      - name: Build (CMake)
        working-directory: veyon
        run: cmake --build build --config Release --parallel

      # 8) Collect plugin artifacts
      - name: Gather artifacts
        shell: pwsh
        run: |
          $b = Resolve-Path "veyon/build"
          $out = "artifacts"
          New-Item -ItemType Directory -Force -Path $out | Out-Null

          $pluginDir = Join-Path $b "plugins/chat"
          if (Test-Path $pluginDir) {
            Copy-Item -Recurse "$pluginDir/*" $out/
          }

          if (Test-Path "veyon/plugins/chat/plugin.json") {
            Copy-Item "veyon/plugins/chat/plugin.json" "$out/" -Force
          } elseif (Test-Path "veyon/plugins/chat/plugins/VeyonChat/plugin.json") {
            Copy-Item "veyon/plugins/chat/plugins/VeyonChat/plugin.json" "$out/" -Force
          }

          if (-not (Get-ChildItem $out -Filter "chat.*" -Recurse)) {
            Get-ChildItem -Path $b -Recurse -Include "chat.dll","chat.pdb" |
              Copy-Item -Destination $out -Force
          }

      # 9) Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: veyon-chat-windows-x64
          path: artifacts
